################### SYSTEM ##################################################################################################

    #####################
    ### parameter     ###
    #####################
        summary of BRAINSTORMING file (stuff to to in SYSTEM/LOADER/ADDON)
            On file loading (TODO in parameter addon)(step 3)
                if file is empty
                    store file name, hash of an empty file, and 0 parameter loaded from file
                if file does not exist
                    do nothing
                else
                    save file name, file hash and count the number of parameter loaded from file, then load
                    if an other NOT EMPTY EXISTING file was previously loaded, remove the informations of previous file and leave them empty
                        if already empty (because load of several file), do nothing, just load
                        empty information is not enough to know if several files were loaded or none at all
                
            In parameter (TODO in parameter system)(step 1) ONLY FOR GLOBAL SETTINGS
                store origin (loader name OR None if come from process)
                store parameter hash as soon as it been added in parameterManager
                store filePath hash (or None if does not come from file)
                NEVER update origin OR hash (except in loader overwrite, see bellow)
                
                add a banished list
                    need to hold three items per banished value
                        the banished value
                        the loader origin
                        the amount of times the value is banished
                    manage banished list in addValue/removeValue/setValue?/...
                        if a value is removed and come from a loader, put it in this list
                    method to add value in this list
                    need to save this list
                    
                add an unbanished list
                    manage unbanished list in addValue/removeValue/setValue?/...
                        if a value is removed from this list, put it in banished list 
                    manage value that was previously banished and that are not any more
                    don't save this list
                    the value of the unbanished list are present in the value list

                update loader list to manage index (see range value)
                    manage it in addValue/removeValue/setValue?/...
                    
                hash
                    banished list has to be used
                    value from loader should not be used
                    
            On loader loading (TODO in parameter loader)(step 2)
                if parameter does not exist, create it and register the loader in dependancies list
                    parameter has to be set to transient
                if parameter exists AND recreation disabled, just add the loader in the list dependancies
                if parameter exists AND recreation enabled, create a new parameter with a new origin and hash BUT keep the dependancies list
            
            On loader unloading (TODO in parameter loader)(step 2)
                if parameter does not exist, do nothing
                if parameter still exist AND not empty dependancies list THEN remove the current loader from list AND unload loader value
                if parameter still exist AND the current loader is alone in dependancies list AND parameter origin is loader AND hash is equal THEN remove it
                if parameter still exist AND the current loader is alone in dependancies list AND parameter origin is loader AND hash is NOT equal THEN remove current loader from list dependancies and remove loader value
                
            On file saving (TODO in parameter system)(step 3)   
                retrieve non transient Global parameter
                loop over these GlobalParameter
                    1) remove parameter from loader with hash equals to empty one (need to add a method to compute empty hash, for each type)
                        an empty one is: default settings, no value in list, no value in banished list
                    2) count parameter from file with equal hash as origin
                    3) count from procedure or with not equal hash as origin
                              
                case to save (if count of step 2) or 3) is bigger than 0)
                    information about origin file are empty
                    new destination file 
                    destination file does not exist
                    file hash is different in front of the hash computed in the starting of the sofware
                    at least one parameter with not equal hash
                    a parameter from procedure that was never stored
                    
                case to not save
                    still same output file, with same hash, with same amount of parameter from file with equal hash  
                    
                do not forget to set origin (so create command in addon)
                do not forget to set banished value (so create command in addon)
  
#################### MISC ####################################################################################################

    #############################
    ### DESIGN ISSUES         ###
    #############################
        1) how to parametrize on a return value ?
            e.g. : echo 1 2 3 | write
                if write has an address argument only available on dashed params ?
                
            the goal is to be able to set the adress from the echo, but is is not possible because only tokens are returned, not key/value

        2) not possible to do that:
            var add toto | echo 1 2 3

        because token "toto" will be sent to the pre of var, then pre of echo, then processed in echo post, and ...
            should be possible to set parameter for command var add, and set the key to toto
            with an argchecker, if it is possible to get an access to the engine, could be possible to get access to the current command object

            FIXED but need process in pre to store args

        3) not possible to do that:
            process | echo16

        because pro of process will never be executed, only process of echo16 will be
        
            prox read 0 | pcs tran | echo16
        
        this will not execute method pro from pcs tran but empty method pro from echo16
        so no instruction will be sent to the card
        
        we want to be able to redirect output without executing process on the last command

        SOLUTION1:
            could be possible to get access to previous command and execute its pro from current args
            COULD be possible to access to any command of the current engine execution

        SOLUTION2: implement double piping
            double || to have similar behaviour as classical bash
            
            prox read 0 | pcs tran || echo16
                
                "prox read 0 | pcs tran " will be executed alone
                    then the result will be forward to a new engine with "echo16" 

        SOLUTION3:
            ... 
            


                



            
        




