#################### MISC ####################################################################################################

    #############################
    ### DESIGN ISSUES         ###
    #############################
        1) how to parametrize on a return value ?
            e.g. : echo 1 2 3 | write
                if write has an address argument only available on dashed params ?
                
            the goal is to be able to set the adress from the echo, but is is not possible because only tokens are returned, not key/value

        2) not possible to do that:
            var add toto | echo 1 2 3

        because token "toto" will be sent to the pre of var, then pre of echo, then processed in echo post, and ...
            should be possible to set parameter for command var add, and set the key to toto
            with an argchecker, if it is possible to get an access to the engine, could be possible to get access to the current command object

            FIXED but need process in pre to store args

        3) not possible to do that:
            process | echo16

        because pro of process will never be executed, only process of echo16 will be
        
            prox read 0 | pcs tran | echo16
        
        this will not execute method pro from pcs tran but empty method pro from echo16
        so no instruction will be sent to the card
        
        we want to be able to redirect output without executing process on the last command

        SOLUTION1:
            could be possible to get access to previous command and execute its pro from current args
            COULD be possible to access to any command of the current engine execution

        SOLUTION2: implement double piping
            double || to have similar behaviour as classical bash
            
            prox read 0 | pcs tran || echo16
                
                "prox read 0 | pcs tran " will be executed alone
                    then the result will be forward to a new engine with "echo16" 

        SOLUTION3:
            ... 
            


                



            
        




